before_script:
  - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY

build-job:
  stage: build
  tags:
    - search
  script:
    - docker build -t $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA .
    - docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA
    - docker tag $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA $CI_REGISTRY_IMAGE:latest
    - docker push $CI_REGISTRY_IMAGE:latest
  rules:
    - if: $CI_COMMIT_BRANCH == "main" && $CI_COMMIT_MESSAGE =~ /(?i)deploy/
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event' && $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == 'main' && $CI_COMMIT_MESSAGE =~ /(?i)deploy/

deploy-job:
  stage: deploy
  image: alpine:latest
  tags:
    - search
  before_script:
    - apk add --no-cache openssh-client || true 
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - ssh-keyscan $REMOTE_HOST >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts

  script:
    - scp $AI_SEARCH_ENV ${REMOTE_USER}@${REMOTE_HOST}:~/.env
    - ssh -o StrictHostKeyChecking=no ${REMOTE_USER}@${REMOTE_HOST} -t "
        docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY;
        docker stop ai-search-app || true;
        docker rm ai-search-app || true;
        docker rmi $CI_REGISTRY_IMAGE:latest || true;
        docker pull $CI_REGISTRY_IMAGE:latest;
        docker run -d --env-file ~/.env --name ai-search-app -v /data/ai-poc/.db:/app/.db/ -p 8000:8000 $CI_REGISTRY_IMAGE:latest
      "
  rules:
    - if: $CI_COMMIT_BRANCH == "main" && $CI_COMMIT_MESSAGE =~ /(?i)deploy/
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event' && $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == 'main' && $CI_COMMIT_MESSAGE =~ /(?i)deploy/
